plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'com.diffplug.spotless'
    id 'com.github.ben-manes.versions'
    id 'maven-publish'
}

group = project.groupId
version = project.version

java {
    var version = JavaVersion.VERSION_21

    sourceCompatibility = version
    targetCompatibility = version
}

repositories {
    mavenCentral()
    maven { url = project.mavenUrl }
}

dependencies {
    api "com.just:just-core:${project.justCoreVersion}"
    api "org.slf4j:slf4j-api:${project.slf4jVersion}"

    compileOnly "org.jetbrains:annotations:${project.jetbrainsAnnotationsVersion}"

    testImplementation "com.fasterxml.jackson.core:jackson-databind:${project.jacksonDatabindVersion}"

    testImplementation platform("org.junit:junit-bom:${project.junitBomVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testRuntimeOnly("ch.qos.logback:logback-classic:${project.logbackClassicVersion}")
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

spotless {
    java {
        eclipse().configFile("eclipse-formatter.xml")
        endWithNewline()
        importOrder("", "java", group.toString(), "\\#")
        leadingTabsToSpaces(4)
        removeUnusedImports()
        trimTrailingWhitespace()
    }
}

jacoco {
    toolVersion = project.jacocoVersion
}

build {
    dependsOn spotlessApply
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification

    reports {
        junitXml.required = false
        html.required = true
    }

    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
        events 'failed'
    }
}

jacocoTestReport {
    dependsOn test
    outputs.upToDateWhen { false }

    reports {
        csv.required = false
        xml.required = false
        html.required = true
    }

    doLast {
        def htmlReportDir = reports.html.outputLocation.get().asFile
        if (htmlReportDir.exists()) {
            logger.lifecycle("The JaCoCo test report is available here: file://${htmlReportDir}/index.html")
        } else {
            logger.lifecycle("JaCoCo HTML report was not generated.")
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            classDirectories.setFrom(jacocoTestReport.classDirectories)

            limit {
                minimum = 0.8
            }
        }

        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = 'Just'
            url = uri(project.mavenUrl)

            credentials {
                username = System.getenv("JUST_MAVEN_USERNAME")
                password = System.getenv("JUST_MAVEN_PASSWORD")
            }

            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = project.groupId
            artifactId = project.artifactId
            version = project.version

            from components.java
        }
    }
}